////
/// This is the sass config variables file.
/// It contains all the sass variables used throughout the partials
/// @author David Allen
/// @since v1.0.0
////





// Fonts

/// This is a map of all fonts used in the website
/// It's used in a variety of mixins to generate classes for fonts
/// Access properties where needed with map-get($fonts, 'property')
$fonts: (
	'light': 'rotis-sans-light',
	'regular': 'rotis-sans-regular'
);


// Sizes

/// This is the baseline size used to base other measurements on.
/// For things like margings, padding and font size.
$baseline: 1rem;


// Colors
$basecolor: #88E3F1;
/// This is a map of all colors used in the website
/// It's used in a variety of mixins to generate classes for text color, background color and border color
/// Access properties where needed with map-get($colors, 'property')
$colors: (
	'f': #FFF,
	'0': #000,
	'black': #333,
	'black-lighter': lighten(#333, 20%),
	'black-lightest': lighten(#333, 20%),
	'grey': #CCC,
	'white': #FBFBFB,
	'blue': $basecolor,
	'green': adjust-hue($basecolor, 270deg),
	'red': adjust-hue($basecolor, 150deg),
	'yellow': adjust-hue($basecolor, 230deg),
	'none': transparent
);



// Sizing and Positioning

/// This is a map of all sizes used in the utility css selectors
/// It's used in the m() and p() mixins to generate the required property sizes, based on the basline variable
/// It's also used to generate utility css selectors like .m-u-m (medium, universal margin).
/// Access properties where needed with map-get($sizes, 'property')
$sizes: (
	'n': $baseline * 0,
	'xs': $baseline * 0.4,
	's':	$baseline * 0.6,
	'm': $baseline,
	'l': $baseline * 1.3,
	'xl': $baseline * 2,
	'xxl': $baseline * 3,
	'xxxl': $baseline * 5,
	'fh': 100vh,
	'fw': 100vw,
	'hh': 50vh,
	'hw': 50vw
);


/// This is a map of all positions used in the utility css selectors
/// It's used in the m() and p() mixins to generate the required property positions
/// Access properties where needed with map-get($positions, 'property')
$positions: (
	't': 'top',
	'b': 'bottom',
	'l': 'left',
	'r': 'right',
	'u': 'universal',
	'h': (
		'1': 'l',
		'2': 'r'
	),
	'v': (
		'1': 't',
		'2': 'b'
	),
	'n': 'none',
	'fh': 'full height',
	'fw': 'full width',
	'hh': 'half height',
	'hw': 'half width'
);

//media queries - http://mydevice.io/devices/
$media: (
	'xs': 0em, //320px - smallest device screen size
	's': 37.5em, //600px, - smallest tablet screen size
	'm': 75em, //1200px
	'l': 100em, //1600px
	'xl': 130em
);

/// This is the amount of columns defined for the grid system
$columns: 12;
$gutter: map-get($sizes, 'xl');

/// The width of each column in %
$column-width: 100 / $columns;

//layers - z-index
$layers: 10;

//TODO move this to mixin.
$linear-gradient: repeating-linear-gradient(135deg, transparent, transparent 10px, rgba(255,255,255,.1) 10px, rgba(255,255,255,.1) 20px);
